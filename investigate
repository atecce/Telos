#!/usr/bin/env python
#
# I should not like my writing to spare other people the trouble of thinking.
# But, if possible, to stimulate someone to thoughts of their own.
#

class lyrics_site:	

	# be patient
	import time

	# set the canvas
	from canvas import database
	canvas = database.canvas()

	def communicate(self, url):

		from bs4 import BeautifulSoup
		import requests

		# never stop trying
		while True:

			# make some soup
			try:

				page = requests.get(url)
				soup = BeautifulSoup(page.content)

				return soup

			# give communication a chance
			except requests.exceptions.ConnectionError: pass

			self.time.sleep(1)

	def multitask(self, processes, process_target, process_args):

		# don't wait for your neighbors
		import multiprocessing

		# and focus
		branching_factor = 8

		# start
		process = multiprocessing.Process(target=process_target, args=process_args)
		process.start()

		# keep track of your progress
		processes.append(process)
		alive = [process for process in processes if process.is_alive()]

		# don't overextend
		while len(alive) >= branching_factor:

			# pace yourself
			alive = [process for process in processes if process.is_alive()]
			self.time.sleep(1)

class lyrics_net(lyrics_site): 

	url = 'http://www.lyrics.net/'

	def investigate(self):

		import re

		soup = self.communicate(self.url)

		alphabet_urls = (self.url + re.match('^/artists/[A-Z0]$', link.get('href')).group(0) + '/99999' \
				 for link in soup.find_all('div', {'id': 'page-letter-search'})[0]      	\
				          if re.match('^/artists/[A-Z0]$', str(link.get('href'))))

		artist_tags = (trace.strong.a 		  		     		  \
			       for alphabet_url in alphabet_urls 	     	 	  \
			       for trace in self.communicate(alphabet_url).find_all('tr') \
			       		 if trace.strong)

		artist_data = ((artist_tag.text, self.url + artist_tag.get('href')) for artist_tag in artist_tags)

		last_artist = self.canvas.get_artists()[-1]

		caught_up = bool()

		for artist_name, artist_url in artist_data: 

			if artist_name.encode('utf-8') == last_artist: caught_up = True

			if caught_up: self.multitask(artists, self.honor, (artist_name, artist_url,))
			
			else: print artist_name

	def honor(self, artist_name, artist_url):

		artist_soup = self.communicate(artist_url)

		self.canvas.add_artist(artist_name)

		print "\nArtist:", artist_name, "\ninserted"

		album_labels = artist_soup.find_all('h3', {'class': 'artist-album-label'})

		for album_label in album_labels:

			album_title = album_label.a.text
			album_url   = self.url + album_label.a.get('href')

			self.multitask(albums, self.admire, (artist_name, artist_url, album_title, album_url,))

	def admire(self, artist_name, artist_url, album_title, album_url):

		album_soup = self.communicate(album_url)

		# TODO
		if album_soup.find_all('body', {'id': 's4-page-homepage'}): 

			print "\tArtist:", artist_name, "\n\tAlbum:", album_title, "\n\tredirects to home page\n"

			with open('home_page_albums.txt', 'a') as f: f.write(artist_name.encode('utf-8') + ', ' + album_title.encode('utf-8') +'\n')

			return

		self.canvas.add_album(artist_name, album_title)

		print "\n\tArtist:", artist_name, "\n\tAlbum:", album_title, "\n\tinserted"

		song_data = ((song_tag.a.text, self.url + song_tag.a.get('href'))  \
			     for song_tag in album_soup.find_all('strong') 	   \
			     		  if song_tag.a)

		for song_title, song_url in song_data:

			self.multitask(songs, self.experience, (album_title, song_title, song_url,))

	def experience(self, album_title, song_title, song_url):

		song_soup = self.communicate(song_url)

		# TODO
		if song_soup.find_all('body', {'id': 's4-page-homepage'}): 
			
			print "\n\t\tSong:", song_title, "\n\t\tAlbum:", album_title, "\n\t\tredirects to home page\n"

			with open('home_page_songs.txt','a') as f: f.write(album_title.encode('utf-8') + ', ' + song_title.encode('utf-8') + '\n')

			return

		try: lyrics = song_soup.find_all('pre', {'id': 'lyric-body-text'})[0].text

		except IndexError: return

		self.canvas.add_song(album_title, song_title, lyrics)

		print "\t\tSong:", song_title, "\n\t\tAlbum:", album_title, "\n\t\tinserted\n"

		print

		for line in lyrics.splitlines(): print '\t\t\t', line

		print

if __name__ == '__main__':

	artists = list()
	albums  = list()
	songs   = list()

	with open('home_page_albums.txt', 'w') as f: f.write('')
	with open('home_page_songs.txt', 'w') as f:  f.write('')

	investigation = lyrics_net()

	investigation.investigate()
