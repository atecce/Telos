#!/usr/bin/env python
#
# I should not like my writing to spare other people the trouble of thinking. 
# But, if possible, to stimulate someone to thoughts of their own.
#

from canvas import database

class lyrics_site:

	# be patient
	import time

	# but don't wait for your neighbors
	import multiprocessing

	# and focus
	branching_factor = 8

	# set the canvas
	canvas = database.canvas()

	def communicate(self, url):

		from bs4 import BeautifulSoup
		import requests

		# never stop trying
		while True:

			# make some soup
			try:

				page = requests.get(url)
				soup = BeautifulSoup(page.content)

				return soup

			# give communication a chance
			except requests.exceptions.ConnectionError: pass

			self.time.sleep(1)

	def multitask(self, processes, process_name, process_target, process_args):

			process = self.multiprocessing.Process(name=process_name, target=process_target, args=process_args)

			processes.add(process)

			process.start()

			alive =  [(process.name, process.is_alive()) for process in processes if process.is_alive()]
			
			while len(alive) >= self.branching_factor:

				alive =  [(process.name, process.is_alive()) for process in processes if process.is_alive()]

				self.time.sleep(1)

class lyrics_net(lyrics_site): 

	url = 'http://www.lyrics.net/'

	def investigate(self):

		import re

		soup = self.communicate(self.url)

		alphabet_urls = (self.url + re.match('^/artists/[A-Z0]$', link.get('href')).group(0) + '/99999' \
				 for link in soup.find_all('div', {'id': 'page-letter-search'})[0]      	\
				          if re.match('^/artists/[A-Z0]$', str(link.get('href'))))

		artist_tags = (trace.strong.a 		  		     		  \
			       for alphabet_url in alphabet_urls 	     	 	  \
			       for trace in self.communicate(alphabet_url).find_all('tr') \
			       		 if trace.strong)

		artist_data = ((artist_tag.text, self.url + artist_tag.get('href')) for artist_tag in artist_tags)

		started = list()

		for artist_name, artist_url in artist_data: 
			
			if artist_name in self.canvas.get_artists():

				print "\nArtist:", artist_name, "\nstarted already."

				started.append((artist_name, artist_url))
				continue

			self.multitask(artists, artist_name, self.honor, (artist_name, artist_url,))

		for artist_name, artist_url in started: 

			self.multitask(artists, artist_name, self.honor, (artist_name, artist_url,))

	def honor(self, artist_name, artist_url):

		soup = self.communicate(artist_url)

		self.canvas.draw("""insert into artists (name)
					   values (%s)
					   on duplicate key update
					   name = name""",
					   [artist_name])

		print "\nArtist:", artist_name, "\ninserted"


		album_labels = soup.find_all('h3', {'class': 'artist-album-label'})

		started = list()

		for album_label in album_labels:

			album_title = album_label.a.text
			album_url   = self.url + album_label.a.get('href')

			if album_title in self.canvas.get_albums(artist_name):

				started.append((album_title, album_url))
				continue

			self.multitask(albums, album_title, self.admire, (artist_name, album_url, album_title,))

		for album_title, album_url in started: 

			self.multitask(albums, album_title, self.admire, (artist_name, album_url, album_title,))

	def admire(self, artist_name, album_url, album_title):

		soup = self.communicate(album_url)

		# TODO
		if soup.find_all('body', {'id': 's4-page-homepage'}): 
			
			print "\tArtist:", artist_name, "\n\tAlbum:", album_title, "\n\tredirects to home page\n"
			return

		self.canvas.draw("""insert into albums (artist_name, title)
					   values (%s, %s)
					   on duplicate key update
					   artist_name = artist_name, title = title""",
					   [artist_name, album_title])

		print "\n\tArtist:", artist_name, "\n\tAlbum:", album_title, "\n\tinserted"


		song_data = ((self.url + song_tag.a.get('href'), song_tag.a.text)  \
			     for song_tag in soup.find_all('strong')  		   \
			     		  if song_tag.a)

		for song_url, song_title in song_data:

			self.multitask(songs, song_title, self.experience, (album_title, song_url, song_title,))

	def experience(self, album_title, song_url, song_title):

		soup = self.communicate(song_url)

		# TODO
		if soup.find_all('body', {'id': 's4-page-homepage'}): 
			
			print "\n\t\tSong:", song_title, "\n\t\tAlbum:", album_title, "\n\t\tredirects to home page\n"
			return

		try: lyrics = soup.find_all('pre', {'id': 'lyric-body-text'})[0].text

		except IndexError: return

		self.canvas.draw("""insert into songs (album_title, title, lyrics)
					   values (%s, %s, %s)
					   on duplicate key update
					   album_title = album_title, title = title, lyrics = lyrics""",
					   [album_title, song_title, lyrics])

		print "\t\tSong:", song_title, "\n\t\tAlbum:", album_title, "\n\t\tinserted\n"

		print

		for line in lyrics.splitlines(): print '\t\t\t', line

		print

if __name__ == '__main__':

	artists = set()
	albums  = set()
	songs   = set()

	investigation = lyrics_net()

	investigation.investigate()
